name: Dependency Updates

on:
  schedule:
    - cron: '0 3 * * 1'  # Every Monday at 3 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-python-dependencies:
    name: Update Python Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety
    
    - name: Update requirements
      run: |
        # Compile new requirements
        pip-compile requirements.in --upgrade --resolver=backtracking
        pip-compile dev-requirements.in --upgrade --resolver=backtracking
    
    - name: Check for security vulnerabilities
      run: |
        safety check --json > safety-report.json || true
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Python dependencies'
        title: 'chore: Update Python dependencies'
        body: |
          ## Python Dependency Updates
          
          This PR updates Python dependencies to their latest versions.
          
          ### Security Report
          ```json
          $(cat safety-report.json)
          ```
          
          ### Checklist
          - [ ] All tests pass
          - [ ] No security vulnerabilities introduced
          - [ ] Application runs correctly with updated dependencies
        branch: update-python-dependencies
        delete-branch: true
        labels: |
          dependencies
          python

  update-docker-base-images:
    name: Update Docker Base Images
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Update Dockerfile base images
      run: |
        # Update Python base image
        sed -i 's/FROM python:[0-9.]\+-slim/FROM python:3.11-slim/g' docker/Dockerfile
        
        # Update other base images if present
        sed -i 's/FROM node:[0-9.]\+-alpine/FROM node:18-alpine/g' docker/Dockerfile
    
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'docker/Dockerfile'
        format: 'json'
        output: 'trivy-report.json'
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Docker base images'
        title: 'chore: Update Docker base images'
        body: |
          ## Docker Base Image Updates
          
          This PR updates Docker base images to their latest versions.
          
          ### Security Scan Results
          See trivy-report.json for detailed vulnerability information.
          
          ### Checklist
          - [ ] Docker images build successfully
          - [ ] No critical vulnerabilities
          - [ ] Application runs correctly with updated images
        branch: update-docker-images
        delete-branch: true
        labels: |
          dependencies
          docker
          security

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit
      run: |
        if [ -f package.json ]; then
          npm audit --json > npm-audit.json || true
        fi
    
    - name: Create security issue if vulnerabilities found
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Check for vulnerabilities
          let hasVulnerabilities = false;
          let vulnerabilityReport = '## Security Vulnerabilities Found\n\n';
          
          // Check npm audit
          if (fs.existsSync('npm-audit.json')) {
            const npmAudit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
            if (npmAudit.metadata && npmAudit.metadata.vulnerabilities) {
              const vulns = npmAudit.metadata.vulnerabilities;
              if (vulns.total > 0) {
                hasVulnerabilities = true;
                vulnerabilityReport += `### NPM Vulnerabilities\n`;
                vulnerabilityReport += `- Critical: ${vulns.critical}\n`;
                vulnerabilityReport += `- High: ${vulns.high}\n`;
                vulnerabilityReport += `- Moderate: ${vulns.moderate}\n`;
                vulnerabilityReport += `- Low: ${vulns.low}\n\n`;
              }
            }
          }
          
          if (hasVulnerabilities) {
            // Create issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security: Vulnerabilities detected in dependencies',
              body: vulnerabilityReport,
              labels: ['security', 'high-priority']
            });
          }