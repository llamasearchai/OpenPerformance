[tool.poetry]
name = "mlperf"
version = "0.1.0"
description = "ML Performance Engineering Platform"
authors = ["OpenPerformance Team <team@openperformance.ai>"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "mlperf", from = "python" },
]

[tool.poetry.dependencies]
python = "^3.8"
numpy = "^1.24.0"
scipy = "^1.10.0"
pandas = "^2.0.0"
torch = { version = "^2.0.0", optional = true }
tensorflow = { version = "^2.12.0", optional = true }
jax = { version = "^0.4.0", optional = true }
transformers = "^4.30.0"
datasets = "^2.12.0"
accelerate = "^0.20.0"
deepspeed = { version = "^0.9.0", optional = true }
horovod = { version = "^0.28.0", optional = true }
mpi4py = "^3.1.0"
psutil = "^5.9.0"
nvidia-ml-py = "^12.535.0"
pynvml = "^11.5.0"
fastapi = "^0.100.0"
uvicorn = "^0.22.0"
websockets = "^11.0.0"
pydantic = "^2.0.0"
sqlalchemy = "^2.0.0"
alembic = "^1.11.0"
redis = "^4.5.0"
celery = "^5.2.0"
prometheus-client = "^0.17.0"
grafana-api = "^1.0.3"
typer = "^0.9.0"
rich = "^13.4.0"
click = "^8.1.0"
pyyaml = "^6.0"
toml = "^0.10.0"
python-dotenv = "^1.0.0"
requests = "^2.31.0"
aiohttp = "^3.8.0"
asyncio = "^3.4.3"
concurrent-futures = "^3.1.1"
joblib = "^1.3.0"
tqdm = "^4.65.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
plotly = "^5.15.0"
bokeh = "^3.2.0"
streamlit = "^1.24.0"
jupyter = "^1.0.0"
ipywidgets = "^8.0.0"
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.2.0"
nbsphinx = "^0.9.0"
myst-parser = "^2.0.0"
openai = "^1.20.0"
anthropic = "^0.25.0"
langchain = "^0.1.0"
chromadb = "^0.4.0"
faiss-cpu = "^1.7.0"
sentence-transformers = "^2.2.0"
mlflow = "^2.4.0"
wandb = "^0.15.0"
tensorboard = "^2.13.0"
optuna = "^3.2.0"
ray = "^2.5.0"
dask = "^2023.6.0"
prefect = "^2.10.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.3.1"
pytest-mock = "^3.11.0"
pytest-asyncio = "^0.21.0"
pytest-benchmark = "^4.0.0"
black = "^23.3.0"
isort = "^5.12.0"
mypy = "^1.4.0"
flake8 = "^6.0.0"
pylint = "^2.17.0"
bandit = "^1.7.0"
safety = "^2.3.0"
pre-commit = "^3.3.0"
jupyterlab = "^4.0.0"
ipdb = "^0.13.0"
memory-profiler = "^0.61.0"
line-profiler = "^4.0.0"
py-spy = "^0.3.0"

[tool.poetry.group.rust.dependencies]
maturin = "^1.1.0"

[tool.poetry.extras]
pytorch = ["torch", "torchvision", "torchaudio"]
tensorflow = ["tensorflow", "tensorflow-gpu"]
jax = ["jax", "jaxlib"]
distributed = ["deepspeed", "horovod"]
all = ["torch", "tensorflow", "jax", "deepspeed", "horovod"]

[tool.poetry.scripts]
mlperf = "mlperf.cli:app"
mlperf-server = "mlperf.api.main:start_server"
mlperf-worker = "mlperf.workers.main:start_worker"

[build-system]
requires = ["poetry-core>=1.0.0", "maturin>=1.1.0"]
build-backend = "maturin"

[tool.maturin]
python-source = "python"
module-name = "mlperf_rust"
features = ["pyo3/extension-module"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "tensorflow.*",
    "jax.*",
    "horovod.*",
    "deepspeed.*",
    "mpi4py.*",
    "nvidia_ml_py.*",
    "pynvml.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--cov=mlperf",
    "--cov-report=xml",
    "--cov-report=term",
    "--cov-report=html",
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "distributed: marks tests that require distributed setup",
]

[tool.coverage.run]
source = ["python/mlperf"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 