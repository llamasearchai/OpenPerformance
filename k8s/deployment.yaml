apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-performance-platform-api
  namespace: ml-performance-platform
  labels:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: ml-performance-platform
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: kubernetes
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "ML Performance Platform API Server with enterprise features"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: ml-performance-platform
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ml-performance-platform
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: ml-performance-platform
        app.kubernetes.io/version: "2.1.0"
        # Istio service mesh labels
        security.istio.io/tlsMode: istio
        sidecar.istio.io/inject: "true"
        # Monitoring labels
        monitoring: "true"
        metrics: "true"
      annotations:
        # Prometheus scraping
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        # Istio configuration
        sidecar.istio.io/proxyCPU: "100m"
        sidecar.istio.io/proxyMemory: "128Mi"
        # Security annotations
        container.apparmor.security.beta.kubernetes.io/ml-performance-api: runtime/default
    spec:
      serviceAccountName: ml-performance-platform
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname
        # GPU node affinity (if GPU required)
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: accelerator
                operator: In
                values:
                - nvidia-tesla-v100
                - nvidia-tesla-t4
                - nvidia-a100
      
      # Topology spread constraints
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: api
      
      # Init containers for setup
      initContainers:
      - name: database-migration
        image: ml-performance-platform:2.1.0
        command: ["python", "-m", "alembic", "upgrade", "head"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ml-performance-platform-secrets
              key: database-url
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      
      containers:
      - name: ml-performance-api
        image: ml-performance-platform:2.1.0
        imagePullPolicy: IfNotPresent
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        
        # Container ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: health
          containerPort: 8080
          protocol: TCP
        
        # Environment variables
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Configuration from ConfigMap
        envFrom:
        - configMapRef:
            name: ml-performance-platform-config
        
        # Secrets
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ml-performance-platform-secrets
              key: openai-api-key
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ml-performance-platform-secrets
              key: database-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ml-performance-platform-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: ml-performance-platform-secrets
              key: jwt-secret
        
        # Resource requirements
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
            nvidia.com/gpu: 0  # Optional GPU
          limits:
            cpu: 4000m
            memory: 8Gi
            nvidia.com/gpu: 1  # Max 1 GPU per pod
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /app/logs
        - name: model-cache
          mountPath: /app/models
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: health
            httpHeaders:
            - name: Accept
              value: application/json
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: health
            httpHeaders:
            - name: Accept
              value: application/json
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for slow starts
        startupProbe:
          httpGet:
            path: /startup
            port: health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15; kill -SIGTERM 1"
      
      # Additional containers
      - name: metrics-exporter
        image: prom/node-exporter:latest
        ports:
        - name: node-metrics
          containerPort: 9100
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        args:
        - '--path.procfs=/host/proc'
        - '--path.sysfs=/host/sys'
        - '--collector.filesystem.ignored-mount-points'
        - '^/(dev|proc|sys|var/lib/docker/.+)($|/)'
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: cache
        emptyDir:
          sizeLimit: 5Gi
      - name: logs
        emptyDir:
          sizeLimit: 2Gi
      - name: model-cache
        persistentVolumeClaim:
          claimName: ml-performance-platform-models
      - name: proc
        hostPath:
          path: /proc
          type: Directory
      - name: sys
        hostPath:
          path: /sys
          type: Directory
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Scheduling
      priorityClassName: high-priority
      terminationGracePeriodSeconds: 30
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: ml-performance-platform-api
  namespace: ml-performance-platform
  labels:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: ml-performance-platform
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: api
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: ml-performance-platform-api-headless
  namespace: ml-performance-platform
  labels:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: ml-performance-platform
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: api

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-performance-platform-api-hpa
  namespace: ml-performance-platform
  labels:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-performance-platform-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ml-performance-platform-api-pdb
  namespace: ml-performance-platform
  labels:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ml-performance-platform
      app.kubernetes.io/component: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ml-performance-platform-api-ingress
  namespace: ml-performance-platform
  labels:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: ingress
  annotations:
    # Ingress class
    kubernetes.io/ingress.class: nginx
    
    # SSL and security
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Requested-With"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"
    nginx.ingress.kubernetes.io/load-balance: "ewma"
    
    # Performance
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/client-body-timeout: "300"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'";
spec:
  tls:
  - hosts:
    - api.mlperformance.ai
    - mlperformance.ai
    secretName: ml-performance-platform-tls
  rules:
  - host: api.mlperformance.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ml-performance-platform-api
            port:
              number: 80
  - host: mlperformance.ai
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: ml-performance-platform-api
            port:
              number: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-performance-platform-models
  namespace: ml-performance-platform
  labels:
    app.kubernetes.io/name: ml-performance-platform
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
  volumeMode: Filesystem 